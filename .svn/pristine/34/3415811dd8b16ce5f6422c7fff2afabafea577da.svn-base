package com.bp.bll;
import java.io.File;
import java.util.List;
import java.util.Map;

import com.bp.common.*;
import com.bp.msgfactory.*;
import com.bp.msginterface.*;

/**
* @author zyk
* @version 创建时间：2017年8月7日 下午4:10:46
* Web 服务线程监视工具 （监视消息队列服务器是否正常工作）类说明
*/
public class ThreadMonitor implements Runnable {
	/*
	 * 线程运行入口
	 * @see java.lang.Runnable#run()
	 */
	public void run()
	{
		MonitorMQAPI();
	}
	/**
	 * 线程空闲休息时间，单位：秒
	 */
	private static int ThreadFreeTime=1;
	static{
		ConfigurationManager mgr=new ConfigurationManager();
		String freeTime=mgr.ReadConfiByNodeName("ThreadFreeTime")==""?"1":mgr.ReadConfiByNodeName("ThreadFreeTime");
		ThreadFreeTime=Integer.parseInt(freeTime);
	}
	/**
	 * API服务监视消息队列
	 */
	private void MonitorMQAPI()
	{
		IBaseMQ mQ=MQFactory.GetMQInfo();
		while(true)
		{
			//判断消息队列是否可用
			if (!BPFlg.getMSMQServerCanUse() && mQ.CanUseMQ())
            {
                //1:设置消息队列标识符可用
                if (!BPFlg.getMSMQServerCanUse())
                {
                    BPFlg.setMSMQServerCanUse(true);
                    LogWritter.LogWritterInfo(ThreadMonitor.class, LogEnum.Error,String.format("线程:%s API服务监视器--已查看到MQ消息服务已启动!", Thread.currentThread().getId()));
                }
            }
            else if (BPFlg.getMSMQServerCanUse())
            {
            	 //查看是否有持久化消息需要写入到服务
                //2:从持久化文本文件中读取消息写入到MQ中 
                try
                {
                    //递归遍历共享文件目录，有文件则读取文件信息发送MQ
                    DGDirFile(SaveMQLocal.ShareDir);
                    //指定的时间单位为秒
                    Thread.sleep(ThreadFreeTime * 1000);
                }
                catch (Exception e)
                {
                    LogWritter.LogWritterInfo(ThreadMonitor.class, LogEnum.Error,"API监视线程异常,"+e.getMessage());
                }
            }
            else
            {
            	//指定的时间单位为秒
            	ThreadSleep(ThreadFreeTime);
            }
		}
	}
	/**
	 * 线程休息指定的时间
	 * @param times 单位：秒
	 */
	private void ThreadSleep(int times){
		//指定的时间单位为秒
    	try  
        {  
    		Thread.sleep(times * 1000);
        }  
        catch (InterruptedException e)  
        {  
        }
	}
	/**
	 * 从本地文件读取消息发送到消息队列服务中
	 * @param Dir
	 */
	private void DGDirFile(String Dir)
	{
		IBaseMQ mQ=MQFactory.GetMQInfo();
		File file=new File(Dir);
		if(file.isDirectory()&&file.exists())
		{
			if(BPFlg.getMSMQServerCanUse())
			{
				File[] files= file.listFiles();
				for(File f:files)
				{
					if(!f.isDirectory())
					{
						String content= SaveMQLocal.GetInfoBackClear(f.getAbsolutePath());
						if(content!=null&&content.length()>0)
						{
							//消息添加到消息队列服务器，每一个消息都有一个换行符分隔
							String[] MQSum=content.split("\r\n");
							for(String msg:MQSum)
							{
								if(msg.trim().length()<=0)
								{
									continue;
								}
								try
								{
									//不需要转换对象，保存时就说一个JSON字符串
									//Object  obj= JsonUtility.JSONStrToObj(msg);
									//获取到key
									String strSum = msg.substring(1, msg.length() - 2);
									String[] sum=strSum.split(":\\[");
									if(sum!=null&&sum.length==2)
									{
										String key=sum[0].replaceAll("\"", "");
										Object  obj=msg;
										if(obj!=null)
										{
											mQ.SaveMQInfo(obj);
										}
									}
								}
								catch(Exception e)
								{
									BPFlg.setMSMQServerCanUse(false);
									//保存到文本文件
									SaveMQLocal.SaveMQToTxt(msg);
									//记录日志
									LogWritter.LogWritterInfo(ThreadMonitor.class, LogEnum.Error,String.format("线程:%s 读取本地持久化文件到MQ过程，MQ服务异常，消息再次持久化到本地!", Thread.currentThread().getId()));
									//停止当前线程指定时间
									ThreadSleep(ThreadFreeTime);
								}
							}
						}
						else
						{
							ThreadSleep(ThreadFreeTime);
						}
					}
					else
					{
						//为目录则递归遍历
						DGDirFile(f.getAbsolutePath());
					}
				}
			}
			else
			{
				ThreadSleep(ThreadFreeTime);
			}
		}
		else
		{
			ThreadSleep(ThreadFreeTime);
		}
	}
}
