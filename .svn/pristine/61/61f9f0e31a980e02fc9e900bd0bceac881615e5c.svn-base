package com.bp.common;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.bp.bll.BPFlg;
import com.bp.bll.BPRegistDAL;

/**
 * 数据校验类
 * @author aaa
 *
 */
public class DataValid {
	/**
	 * 是否开启校验
	 */
	 private static String OpenValid=null;
	 /**
	  * 校验模式  1:只验证埋点键值数量  2：验证埋点键值名称一一对应
	  */
	 private static String ValidType=null;
	 //静态代码块，声明类时执行
	 static{
		 ConfigurationManager manager=new ConfigurationManager();
		 OpenValid=manager.ReadConfiByNodeName("OpenValid");
		 ValidType=manager.ReadConfiByNodeName("ValidType").equals("")?"1":manager.ReadConfiByNodeName("ValidType");
	 }
	 /**
	  * JSON转map对象后进行校验
	  * @param jsonMap
	  * json格式转换成Map对象
	  * @param OutMsg
	  * 验证错误问题说明
	  * @return
	  */
	 public static boolean IsValidFormByJsonObj(Map<String, List<Map<String, String>>> jsonMap,final String[] OutMsg)
	 {
		 if(OpenValid==null)
		 {
			 ConfigurationManager manager=new ConfigurationManager();
			 OpenValid=manager.ReadConfiByNodeName("OpenValid");
		 }
		 if(ValidType==null)
		 {
			 ConfigurationManager manager=new ConfigurationManager();
			 ValidType=manager.ReadConfiByNodeName("ValidType").equals("")?"1":manager.ReadConfiByNodeName("ValidType");
		 }
		 //1：判断是否开启校验
		 if(!OpenValid.equals("1"))
		 {
			 return true;
		 }
		 //2:同埋点注册信息进行校验
		 //2.1:校验埋点key是否注册
		 boolean isValid=true;//是否验证成功
		 for(String k:jsonMap.keySet())
		 {
			 List<Map<String, String>> lst= jsonMap.get(k);
			 StringBuilder strInfo=new StringBuilder();
			 //缓存中获取当前埋点键值信息
			 Map<String,String> kvs= BPFlg.GetBpKValues(k);
			 //2.1校验埋点是否未注册
			 if(kvs.keySet().size()==0)
			 {
				 strInfo.append("未注册当前埋点信息或埋点键值对信息为空！");
				 isValid=false;
				//返回客户端信息
				 OutMsg[0]=strInfo.toString();
				 break;
			 }
			 //2.2判断埋点键值对信息是否一致
			 for(Map<String,String> map:lst)
			 {
				 //2.2:首先验证键值数量是否一致；如不一致则验证哪个键有问题
				 if(map.keySet().size()==kvs.keySet().size())
				 {
					 if(ValidType.equals("1"))
					 {
						 isValid=true;
						 continue;
					 }
					 else
					 {
						 //进行埋点键值对一一校验
						 isValid=ValidMapKey(kvs,map,strInfo);
					 }
				 }
				 else
				 {
					 //进一步验证哪些键缺少
					 strInfo=ValidMap(kvs,map);
					 isValid=false;
				 }
				 if(!isValid){
					 break;
				 }
			 }
			 if(!isValid){
				 //返回客户端信息
				 OutMsg[0]=strInfo.toString();
				 break;
			 }
		 }
		 return isValid;
	 }
	 /**
	  * 验证埋点键集合是否一致
	  * @param RMap 注册的埋点键集合
	  * @param CMap 客户端上传的埋点键集合
	  * @param sb 返回相关信息
	  * @return
	  */
	 public static boolean ValidMapKey(Map<String,String> RMap,Map<String,String>CMap,StringBuilder sb)
	 {
		 boolean validSuccess=true;
		 sb.append("埋点已注册键，客户端未提供：");
		 for(String k:RMap.keySet())
		 {
			 if(!CMap.containsKey(k))
			 {
				 sb.append(k+",");
				 validSuccess=false;
			 }
		 }
		 return validSuccess;
	 }
	 
	 /**
	  * 两个Map进行校验
	  * @param RMap 埋点注册的Map
	  * @param CMap 客户端上传的Map
	  * @return
	  */
	 public static StringBuilder ValidMap(Map<String,String> RMap,Map<String,String>CMap)
	 {
		 StringBuilder sb=new StringBuilder();
		 if(RMap.keySet().size()>CMap.keySet().size())
		 {
			 sb.append("当前埋点已注册键，但是客户端未提供：");
			 for(String k:RMap.keySet())
			 {
				 if(!CMap.containsKey(k))
				 {
					 sb.append(k+",");
				 }
			 }
		 }
		 else
		 {
			 sb.append("客户端提供了当前埋点中未注册的键：");
			 for(String k:CMap.keySet())
			 {
				 if(!RMap.containsKey(k))
				 {
					 sb.append(k+",");
				 }
			 }
		 }
		 return sb;
	 }
	 /**
	  * 校验埋点信息是否符合
	  * @param key 键
	  * @param val 内容
	  * @param OutMsg 输出信息 取数组第一个值
	  * @return
	  */
	 public static boolean IsValidFormBaseModel(String key,String val, String[] OutMsg)
	 { 
		 if(OpenValid==null)
		 {
			 ConfigurationManager manager=new ConfigurationManager();
			 OpenValid=manager.ReadConfiByNodeName("OpenValid");
		 }
		 OutMsg=new String[1];
		 //判断是否开启校验
		 if(!OpenValid.equals("1"))
		 {
			 return true;
		 }
		 //判断是否可以转换成JSON格式
		 if(JsonUtility.IsJSON(val))
		 {
			 return true;
		 }
		 else
		 {
			 OutMsg[0]="埋点内容信息转换JSON格式失败！";
			return false; 
		 }
	 }
}
