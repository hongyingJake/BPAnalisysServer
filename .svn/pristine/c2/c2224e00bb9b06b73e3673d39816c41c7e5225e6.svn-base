package com.bp.bll;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.bp.common.LogEnum;
import com.bp.common.LogWritter;
import com.bp.models.BPSubPointsModel;

/**
* @author zyk
* @version 创建时间：2017年8月7日 上午11:27:11
* 埋点服务系统缓存资源存储 类说明
*/
public class BPFlg {
	/**
	 * 测试数据查看瓶颈
	 */
	private static List<Integer> saveTime=new ArrayList<Integer>();//整个API保存时间
	private static List<Integer> dubboTime=new ArrayList<Integer>();//只调用dubbo服务的时间
	private static final int size=5000;
	/**
	 * 压力瓶颈数据 整个API响应时间
	 */
	public static void saveTime(int savet)
	{
		saveTime.add(savet);
		if(saveTime.size()>size){
			saveTime.remove(Collections.max(saveTime));//去掉一个最大和最小
			saveTime.remove(Collections.min(saveTime));
			//移除等于0的值
			saveTime.removeAll(Arrays.asList(0));
			int sMax= Collections.max(saveTime);
			int sMin=Collections.min(saveTime);
			int sAvg=getAvg(saveTime);
			String sstr=String.format("整个API请求花费时间(毫秒)：最大时间：%d,最小时间:%d,平均时间:%d",sMax,sMin,sAvg);
			LogWritter.LogWritterInfo(BPFlg.class, LogEnum.Error, sstr);
			saveTime.clear();
		}
	}
	//只调用Dubbo服务的时间
	public static void dubboTime(int dubbot)
	{
		dubboTime.add( dubbot);
		if(dubboTime.size()>size){
			dubboTime.remove(Collections.max(dubboTime));//去掉一个最大和最小
			dubboTime.remove(Collections.min(dubboTime));
			//移除等于0的值
			dubboTime.removeAll(Arrays.asList(0));
			int vMax= Collections.max(dubboTime);
			int vMin=Collections.min(dubboTime);
			int vAvg=getAvg(dubboTime);
			String vstr=String.format("调用dubbo服务花费时间(毫秒)：最大时间：%d,最小时间:%d,平均时间:%d",vMax,vMin,vAvg);
			LogWritter.LogWritterInfo(BPFlg.class, LogEnum.Error, vstr);
			dubboTime.clear();
		}
	}
	private static int getAvg(List<Integer> lst){
		int sum=0;
		for(int i:lst){
			sum+=i;
		}
		return sum/lst.size();
	}
	
	
	/**
	 * 消息队列服务是否可用
	 */
	private static boolean MSMQServerCanUse=true;
	/**
	 * 客户唯一标识键名称
	 */
	private static String mtbpAccountKeyName="mtbpAccountID";
	/**
	 * 埋点校验时哪些键集合不需要校验
	 */
	public static List<String> NoValidateKeys=new ArrayList<String>();
	/**
	 * 并发访问对象锁对象
	 */
	private static Object objClock=new Object();
	/**
	 * 快速埋点标识符
	 */
	public final static String BPSpeedFlg="defaultFunClickCount"; 
	
	/**
	 * 埋点键值集合缓存对象
	 */
	private static Map<String,Map<String,String>> bpKValues=new HashMap<String,Map<String,String>>();
	
	/**
	 * 快速埋点 参数集合 (第一个参数,其他参数集合)
	 */
	private static Map<String,List<String>> SpeedKeys=new HashMap<String,List<String>>();
	
	/**
	 * 静态代码块，初始化数据
	 */
	static{
		//添加埋点不需要校验的键集合信息
		NoValidateKeys.add(mtbpAccountKeyName);
	}
	
	/**
	 * 获取快速埋点其他参数信息
	 * @param pars1 快速埋点第一个参数值
	 * @return
	 */
	public static List<String> GetBPSpeedOthKeys(String pars1){
		List<String> lst=null;
		if(SpeedKeys.containsKey(pars1)){
			lst=SpeedKeys.get(pars1);
		}
		else{
			lst=AddSpeedOthKeysToCache(pars1);
		}
		return lst;
	}
	/**
	 * 获取快速埋点参数集合信息并添加到缓存
	 * @param pars1
	 * @return
	 */
	private static List<String> AddSpeedOthKeysToCache(String pars1){
		List<String> lst=null;
		BPDbBaseDAL dal=new BPDbBaseDAL();
		lst=dal.GetSpeedOthKeys(pars1);
		SpeedKeys.put(pars1, lst);
		return lst;
	}
	/**
	 * 从缓存中移除快速埋点信息
	 * @param pars1 快速埋点参数1
	 */
	public static void RemoveBPSpeedFromCache(String pars1){
		SpeedKeys.remove(pars1);
	}
	
	
	/**
	 * 获取埋点键值集合
	 * @param BPFlg
	 * @return
	 */
	public static Map<String,String> GetBpKValues(String BPFlg)
	{
		Map<String,String> kv=null;
		//不包含当前埋点键集合则添加
		if(!bpKValues.containsKey(BPFlg))
		{
			kv=AddBPKValuesToCache(BPFlg);
		}
		else
		{
			//包含则直接获取
			kv=bpKValues.get(BPFlg);
		}
		return kv;
	}
	/**
	 * 缓存中移除埋点键值集合
	 * @param BPFlg
	 * @param BPKName
	 */
	public static void RemoveBpKValue(String BPFlg,String BPKName)
	{
		Map<String,String> kv=GetBpKValues(BPFlg);
		if(kv.containsKey(BPKName))
		{
			kv.remove(BPKName);
		}
	}
	/**
	 * 添加埋点键集合键值信息到缓存
	 * @param BPFlg
	 * @param BPKName
	 * @param BPKValue
	 */
	public static void AddBpKValue(String BPFlg,String BPKName,String BPKValue)
	{
		Map<String,String> kv=GetBpKValues(BPFlg);
		if(!kv.containsKey(BPKName))
		{
			kv.put(BPKName, BPKValue);
		}
	}
	/**
	 * 添加埋点键集合添加到缓存中
	 * @param BPFlg
	 */
	private static Map<String,String> AddBPKValuesToCache(String BPFlg)
	{
		BPDbBaseDAL dal=new BPDbBaseDAL();
		//1:从数据库获取键集合信息
		List<BPSubPointsModel> lst=dal.GetBPSubPointsKValuesByBPFlg(BPFlg);
		if(lst==null)
		{
			lst=new ArrayList<BPSubPointsModel>();
		}
		//2:键集合添加到缓存中
		Map<String,String> kv=new HashMap<String,String>();
		for(BPSubPointsModel m:lst)
		{
			kv.put(m.BPKName, m.BPKValue);
		}
		//由于埋点时会校验键集合，把不需要校验的键集合添加到缓存中，减少校验时一一进行比较
		for(String key:NoValidateKeys){
			kv.put(key, "");
		}
		bpKValues.put(BPFlg, kv);
		return kv;
	}
	
	/**
	 * 获取消息队列服务是否可用
	 * @return
	 */
	public static boolean getMSMQServerCanUse()
	{
		return MSMQServerCanUse;
	}
	/**
	 * 设置消息队列是否可使用
	 * @param canUse
	 */
	public synchronized static void setMSMQServerCanUse(boolean canUse)
	{
		synchronized(BPFlg.class){
			MSMQServerCanUse=canUse;
		}
	}
}