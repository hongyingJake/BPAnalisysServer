<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
">
	<!-- 搜索spring控件 -->
	<context:component-scan base-package="com.bp"></context:component-scan>
	<context:component-scan base-package="com.mt.zx.buryingpoint.interfaces" />
	<!-- 视图页面配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	<!-- 配置Spring 返回JSON格式数据 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJackson2HttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>text/json;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 获取数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url"
			value="jdbc:mysql://172.16.5.52:3306/MTBPDataBase?useUnicode=true&amp;characterEncoding=UTF-8"></property>
		<property name="username" value="root"></property>
		<property name="password" value="123456"></property>
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="300" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
	</bean>
	<!-- 给jdbc模板注入数据源 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 给userDao注入模板 -->
	<bean id="BPRegist" class="com.bp.bll.BPRegistDAL">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>
	<!-- 给埋点管理控制器注入dao类 -->
	<bean id="BPRegistController" class="com.bp.BPRegistController">
		<property name="BPRegist" ref="BPRegist"></property>
	</bean>
	<!-- 快速埋点注册控制器注入dao类 -->
	<bean id="BPClickController" class="com.bp.BPClickController">
		<property name="BPRegist" ref="BPRegist"></property>
	</bean>
	<!-- 无埋点注册控制器注入dao类 -->
	<bean id="BPNoBuryController" class="com.bp.BPNoBuryController">
		<property name="BPRegist" ref="BPRegist"></property>
	</bean>

	<!-- 配置映射响应器，映射响应器会根据请求文件来决定进入到哪个控制器。这里的key就是你的action请求，后面是要分派的控制器 -->
	<!-- <bean id="mapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"> 
		<property name="mappings"> <props> <prop key="login.do">BPRegistController</prop> 
		</props> </property> </bean> -->
	<!-- 默认的注解映射的支持 -->
	<mvc:annotation-driven />
	<!-- 对静态资源文件的访问 -->
	<mvc:default-servlet-handler />
	<mvc:resources mapping="/js/**" location="/WEB-INF/js/" />
	<mvc:resources mapping="/js/codemirror/**" location="/WEB-INF/js/codemirror" />
	<mvc:resources mapping="/css/**" location="/WEB-INF/css/" />
	<mvc:resources mapping="/images/**" location="/WEB-INF/images/" />
	<mvc:resources mapping="/mtscript/**" location="/WEB-INF/mtscript/" />
	<mvc:resources mapping="/BPPressure/**" location="/WEB-INF/BPPressure/" />
	<!-- 自定义拦截器 客户端请求时，添加响应消息头信息 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*" />
			<!-- exclude-mapping不需要拦截的路径 -->
			<!-- <mvc:exclude-mapping path="/js/**" /> -->
			<bean class="com.bp.CORSInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 用户登录拦截器验证 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 先匹配所有路径，然后排除不需要检查的路径 -->
			<mvc:mapping path="/**" />
			<!-- 登录注册相关和埋点API -->
			<mvc:exclude-mapping path="/BPRegist/**" />
			<mvc:exclude-mapping path="/MtBPAPI/**" />
			<!-- 系统帮助文档 -->
			<mvc:exclude-mapping path="/BPHelper/**" />
			<mvc:exclude-mapping path="/js/codemirror/**" />
			<!-- 以下是静态资源 -->
			<mvc:exclude-mapping path="/images/**" />
			<mvc:exclude-mapping path="/css/**" />
			<mvc:exclude-mapping path="/font/**" />
			<mvc:exclude-mapping path="/js/**" />
			<mvc:exclude-mapping path="/datepicker/**" />
			<mvc:exclude-mapping path="/mtscript/**" />
			<mvc:exclude-mapping path="/mtscript/**" />
			<!-- 压力测试静态页面 -->
			<mvc:exclude-mapping path="/BPPressure/**" />
			<!-- 用户是否已经登录的检查bean -->
			<bean class="com.bp.UserAuthInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
</beans>